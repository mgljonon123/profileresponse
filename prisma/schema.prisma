generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  FREE
  MEDIUM
  PLUS
}

model User {
  id                         String               @id @default(auto()) @map("_id") @db.ObjectId
  fullname                   String
  nickname                   String?
  email                      String               @unique
  passwordHash               String
  profilePicture             String?
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt

  testResults                TestResult[]
  personalityTestResults     PersonalityTestResult[]
  chatHistory                ChatHistory[]
  roadmaps                   Roadmap[]
  recommendations            CareerRecommendation[] @relation("UserRecommendations")
  subscriptions              Subscription[]
  payments                   Payment[]
}

model TestResult {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  testType      String    
  resultData    Json      
  xValue        Float     
  yValue        Float     
  takenAt       DateTime  @default(now())

  
  user          User      @relation(fields: [userId], references: [id])
  recommendations CareerRecommendation[]
  chatHistory   ChatHistory[]
}

model ChatHistory {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  message      String
  isUser       Boolean    
  createdAt    DateTime    @default(now())
  testResultId String?     @db.ObjectId

  
  user         User        @relation(fields: [userId], references: [id])
  testResult   TestResult? @relation(fields: [testResultId], references: [id])
}

model Roadmap {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  careerId    String   @db.ObjectId
  roadmapData Json
  createdAt   DateTime @default(now())

  
  user        User     @relation(fields: [userId], references: [id])
  career      Career   @relation(fields: [careerId], references: [id])
}

model CareerRecommendation {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String      @db.ObjectId
  recommendedCareerId String     @db.ObjectId
  testResultId      String?     @db.ObjectId
  confidenceScore   Float       
  recommendedAt     DateTime    @default(now())
  aiResponse        String?     // New field for AI response (optional)

  user              User        @relation("UserRecommendations", fields: [userId], references: [id])
  career            Career      @relation(fields: [recommendedCareerId], references: [id])
  testResult        TestResult? @relation(fields: [testResultId], references: [id])
}

model Career {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  isTop10     Boolean  @default(false) 
  createdAt   DateTime @default(now())

  
  roadmaps    Roadmap[]
  recommendations CareerRecommendation[]
}

model CareerRecommendation {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  userId               String      @db.ObjectId
  recommendedCareerId  String      @db.ObjectId
  testResultId         String?     @db.ObjectId
  confidenceScore      Float
  recommendedAt        DateTime    @default(now())
  recommendationText   String?     // AI-generated recommendation or explanation

  user                 User        @relation("UserRecommendations", fields: [userId], references: [id])
  career               Career      @relation(fields: [recommendedCareerId], references: [id])
  testResult           TestResult? @relation(fields: [testResultId], references: [id])
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  tier      SubscriptionTier @default(FREE)
  planName  String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  features  Json    

  
  user      User     @relation(fields: [userId], references: [id])
  payments  Payment[]
}

model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  subscriptionId String   @db.ObjectId
  amount         Float
  paymentMethod  String
  paymentDate    DateTime @default(now())
  status         String   

  
  user           User     @relation(fields: [userId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model PersonalityTestResult {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  takenAt       DateTime  @default(now())
  
  // MBTI Results
  mbtiType      String    // e.g., "ENFP"
  
  // MBTI Detailed Scores
  extroversionScore      Int     // Гадагшаа (E) / Дотогшоо (I) score 0-10
  sensingScore           Int     // Мэдрэмж (S) / Зөн совин (N) score 0-10
  thinkingScore          Int     // Бодол (T) / Мэдрэмж (F) score 0-10
  judgingScore           Int     // Шийдвэр (J) / Уян хатан (P) score 0-10
  
  // Holland Code Results
  hollandCode           String   // e.g., "RIA"
  practicalScore        Int      // Практик (R) score
  investigativeScore    Int      // Судалгааны (I) score
  artisticScore         Int      // Уран бүтээл (A) score
  socialScore           Int      // Нийгмийн (S) score
  businessScore         Int      // Бизнес (E) score
  conventionalScore     Int      // Удирдамж (C) score
  
  // Big Five Results (as percentages)
  emotionalStability    Float    // Сэтгэл хөдлөлийн тогтвортой байдал (0-100%)
  extraversion          Float    // Гадагшаа чиглэсэн зан (0-100%)
  openness              Float    // Шинэ санаанд нээлттэй байдал (0-100%)
  agreeableness         Float    // Хамтран ажиллах чадвар (0-100%)
  conscientiousness     Float    // Төлөвлөлттэй, зохион байгуулалттай байдал (0-100%)
  
  // EQ Results
  selfAwareness         Int      // Өөрийгөө ойлгох (0-40)
  selfRegulation        Int      // Өөрийгөө зохицуулах (0-40)
  motivation            Int      // Мотиваци (0-40)
  empathy               Int      // Өрөвдөх сэтгэл (0-40)
  socialSkills          Int      // Нийгмийн ур чадвар (0-40)
  totalEQScore          Int      // Нийт оноо (0-200) 

  progress              Float    @default(0) // Test progress as a percentage (0-100)
  
  user                  User     @relation(fields: [userId], references: [id])
}

